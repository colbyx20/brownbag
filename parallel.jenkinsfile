pipeline {
    agent {
        label 'docker-deploy'
    }

    environment {
        SONARQUBE = 'sonarqube'
        ARTIFACT_NAME = 'demo-1.0-SNAPSHOT.jar'
        DEPLOY_ENV = 'development'
        DOCKER_IMAGE = "colbyx20/brownbag-app:${params.RELEASE}"
    }

    stages {
        stage('Checkout'){
            steps{
                cleanWs()
                checkout scmGit(
                    branches: [[name: 'dev']],
                    userRemoteConfigs: [[credentialsId:  "GIT-CREDENTIALS",
                        url: 'git@github.com:colbyx20/brownbag.git']])
            }
        }

        stage('Clean'){
            steps{
                sh 'git switch dev'
                sh "mvn clean -f demo/pom.xml"
            }
        }

        stage('Unit Test'){
            parallel{
                stage ('TEST'){
                    steps{
                        sh "mvn test -f demo/pom.xml"
                    }
                }
                stage('SonarQube'){
                    steps {
                        script {
                            // Run SonarQube analysis
                            withCredentials([usernamePassword(credentialsId: 'sonar-user-pass', usernameVariable: 'SONAR_USERNAME', passwordVariable: 'SONAR_PASSWORD')]) {
                                sh "mvn sonar:sonar -f demo/pom.xml -Dsonar.host.url=http://sonarqube:9000 -Dsonar.login=${SONAR_USERNAME} -Dsonar.password=${SONAR_PASSWORD}"
                            }
                        }
                    }
                }
            }
        }

        stage('Package'){
            steps{
                sh "mvn package -f demo/pom.xml -DskipTests"
            }
        }
        

        stage('Approval') {
            steps {
                script {
                        def userInput = input id: 'Approval', message: 'Do you want to proceed to the Deploy stage?', ok: 'Proceed', parameters: [
                            booleanParam(defaultValue: true, description: 'Approve deployment?', name: 'approve')
                    ]
                    if (!userInput) {
                        error 'Deployment was not approved'
                    }
                }
            }
        }
        stage('Build Image'){
            steps{=
                script{
                    dir('demo'){
                        sh "docker build -t ${DOCKER_IMAGE} ."
                    }
                }
            }
        }
        

        stage('Push Docker Image'){
            steps{
                script{
                    withCredentials([usernamePassword(credentialsId: 'DOCKER_LOGIN', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                        sh "docker push ${DOCKER_IMAGE}"
                    }
                }
            }
        }    
        
        stage('Update Docker-Compose Manifest'){
            steps{
                dir('demo/deploy'){
                    sh "yq eval '.services.brownbag-app-dev.image=env(DOCKER_IMAGE)' -i docker-compose.yaml"
                    sh "echo '********** Updated Image **********'"
                    sh "yq eval '.services.brownbag-app-dev.image' docker-compose.yaml"
                }
            }
        }
        
        stage('Modify and push'){
            steps{
                sh "git config --global user.email 'colbyx20@gmail.com'"
                sh "git config --global user.name 'jenkins'"
                sh "git add ."
                sh "git commit -m 'Jenkins push new image ${DOCKER_IMAGE}'"
                sh "git push origin HEAD:dev"
            }
        }

        stage('Deploy Application - DEV'){
            steps{
                dir('demo/deploy'){
                    sh 'docker-compose down  --remove-orphans'
                    sh 'docker-compose up --build -d'
                }
            }
        }

    }
}